// Copyright (c) 2022-2023 Smart Vaults
// Distributed under the MIT software license

use smartvaults_sdk::core::bdk;
use uniffi::Object;

#[derive(Object)]
pub struct Balance {
    inner: bdk::wallet::Balance,
}

impl From<bdk::wallet::Balance> for Balance {
    fn from(inner: bdk::wallet::Balance) -> Self {
        Self { inner }
    }
}

#[uniffi::export]
impl Balance {
    /// Get sum of trusted_pending and confirmed coins
    pub fn spendable(&self) -> u64 {
        self.inner.trusted_spendable()
    }

    /// Get the whole balance visible to the wallet
    pub fn total(&self) -> u64 {
        self.inner.total()
    }

    /// Confirmed and immediately spendable balance
    pub fn confirmed(&self) -> u64 {
        self.inner.confirmed
    }

    /// All coinbase outputs not yet matured
    pub fn immature(&self) -> u64 {
        self.inner.immature
    }

    /// Unconfirmed UTXOs generated by a wallet tx
    pub fn trusted_pending(&self) -> u64 {
        self.inner.trusted_pending
    }

    /// Unconfirmed UTXOs received from an external wallet
    pub fn untrusted_pending(&self) -> u64 {
        self.inner.untrusted_pending
    }
}
