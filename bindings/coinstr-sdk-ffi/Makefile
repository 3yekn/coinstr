CURRENT_DIR := $(shell pwd)
SOURCES=$(sort $(wildcard ./src/*.rs ./src/**/*.rs))

.PHONY: init
init:
	rustup target add aarch64-apple-ios x86_64-apple-ios aarch64-apple-ios-sim
	rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
	@if [ $$(uname) == "Darwin" ] ; then cargo install cargo-lipo ; fi
	cargo install cbindgen
	cargo install cargo-ndk

.PHONY: ndk-home
ndk-home:
	@if [ ! -d "${ANDROID_NDK_HOME}" ] ; then \
		echo "Error: Please, set the ANDROID_NDK_HOME env variable to point to your NDK folder" ; \
		exit 1 ; \
	fi

.PHONY: sdk-root
sdk-root:
	@if [ ! -d "${ANDROID_SDK_ROOT}" ] ; then \
		echo "Error: Please, set the ANDROID_SDK_ROOT env variable to point to your SDK folder" ; \
		exit 1 ; \
	fi

clean-android:
	rm -rf ffi/android
	rm -rf ffi/kotlin

kotlin: clean-android android
	cargo run --features=uniffi/cli --bin uniffi-bindgen generate src/coinstr_sdk.udl --language kotlin --no-format -o ffi/kotlin

android: aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

aarch64-linux-android: $(SOURCES) ndk-home
	cargo ndk -t aarch64-linux-android -o ffi/kotlin/jniLibs build --release	

armv7-linux-androideabi: $(SOURCES) ndk-home
	cargo ndk -t armv7-linux-androideabi -o ffi/kotlin/jniLibs build --release	

i686-linux-android: $(SOURCES) ndk-home
	cargo ndk -t i686-linux-android -o ffi/kotlin/jniLibs build --release	

x86_64-linux-android: $(SOURCES) ndk-home
	cargo ndk -t x86_64-linux-android -o ffi/kotlin/jniLibs build --release

bindings-android: sdk-root kotlin
	rm -rf bindings-android/lib/src/main/jniLibs
	rm -rf bindings-android/lib/src/main/kotlin
	cp -r ffi/kotlin/jniLibs bindings-android/lib/src/main
	cp -r ffi/kotlin/io bindings-android/lib/src/main/kotlin/
	cd bindings-android && ./gradlew assemble
	mkdir -p ffi/android
	cp bindings-android/lib/build/outputs/aar/lib-release.aar ffi/android

ios-universal: $(SOURCES)		
	mkdir -p ../../target/ios-universal/release
	mkdir -p ../../target/ios-universal-sim/release
	cargo build --release --target aarch64-apple-ios
	cargo build --release --target x86_64-apple-ios
	cargo build --release --target aarch64-apple-ios-sim
	lipo -create -output ../../target/ios-universal/release/libcoinstr_sdk_ffi.a ../../target/aarch64-apple-ios/release/libcoinstr_sdk_ffi.a ../../target/x86_64-apple-ios/release/libcoinstr_sdk_ffi.a
	lipo -create -output ../../target/ios-universal-sim/release/libcoinstr_sdk_ffi.a ../../target/aarch64-apple-ios-sim/release/libcoinstr_sdk_ffi.a ../../target/x86_64-apple-ios/release/libcoinstr_sdk_ffi.a

swift-ios: ios-universal
	cargo run --features=uniffi/cli --bin uniffi-bindgen generate src/coinstr_sdk.udl -l swift -o ffi/swift-ios
	cp ../../target/ios-universal/release/libcoinstr_sdk_ffi.a ffi/swift-ios
	cd ffi/swift-ios && "swiftc" "-emit-module" "-module-name" "coinstr_sdk_ffi"  "-Xcc" "-fmodule-map-file=$(CURRENT_DIR)/ffi/swift-ios/coinstr_sdkFFI.modulemap" "-I" "."  "-L" "." "-lcoinstr_sdk_ffi" coinstr_sdk.swift

bindings-swift: ios-universal
	mkdir -p bindings-swift/Sources/CoinstrSDK
	cargo run --features=uniffi/cli --bin uniffi-bindgen generate src/coinstr_sdk.udl --no-format --language swift --out-dir bindings-swift/Sources/CoinstrSDK
	mv bindings-swift/Sources/CoinstrSDK/coinstr_sdk.swift bindings-swift/Sources/CoinstrSDK/CoinstrSDK.swift
	cp bindings-swift/Sources/CoinstrSDK/coinstr_sdkFFI.h bindings-swift/coinstr_sdkFFI.xcframework/ios-arm64/coinstr_sdkFFI.framework/Headers
	cp bindings-swift/Sources/CoinstrSDK/coinstr_sdkFFI.h bindings-swift/coinstr_sdkFFI.xcframework/ios-arm64_x86_64-simulator/coinstr_sdkFFI.framework/Headers
	cp ../../target/aarch64-apple-ios/release/libcoinstr_sdk_ffi.a bindings-swift/coinstr_sdkFFI.xcframework/ios-arm64/coinstr_sdkFFI.framework/coinstr_sdkFFI
	cp ../../target/ios-universal-sim/release/libcoinstr_sdk_ffi.a bindings-swift/coinstr_sdkFFI.xcframework/ios-arm64_x86_64-simulator/coinstr_sdkFFI.framework/coinstr_sdkFFI
	rm bindings-swift/Sources/CoinstrSDK/coinstr_sdkFFI.h
	rm bindings-swift/Sources/CoinstrSDK/coinstr_sdkFFI.modulemap

python-dev:
	rm -rf bindings-python/dist
	pip install -r bindings-python/requirements.txt
	cargo run --features=uniffi/cli --bin uniffi-bindgen generate src/coinstr_sdk.udl --language python --no-format -o bindings-python/src/coinstr-sdk/
	cargo build --release
	cp ../../target/release/libcoinstr_sdk_ffi.so bindings-python/src/coinstr-sdk/ | true
	cp ../../target/release/libcoinstr_sdk_ffi.dylib bindings-python/src/coinstr-sdk/ | true
	cd bindings-python && python setup.py --verbose bdist_wheel
	pip install ./bindings-python/dist/coinstr_sdk-*.whl --force-reinstall
