// Copyright (c) 2023 Coinstr
// Distributed under the MIT software license

namespace coinstr_sdk {
    void init_logger(LogLevel level);
    [Throws=FFIError]
    sequence<string> get_keychains_list(string base_path, Network network);
};

[Error]
interface FFIError {
    Generic(string err);
};

enum LogLevel {
    "Error",
    "Warn",
    "Info",
    "Debug",
    "Trace",
};

enum RelayStatus {
    "Initialized",
    "Connected",
    "Connecting",
    "Disconnected",
    "Stopped",
    "Terminated",
};

interface Relay {
    string url();
    RelayStatus status();
    boolean is_connected();
};

enum Network {
    "Bitcoin",
    "Testnet",
    "Signet",
    "Regtest",
};

enum WordCount {
    "W12",
    "W18",
    "W24",
};

interface Balance {
    u64 get_spendable();
    u64 get_total();
};

interface Policy {
    string name();
    string description();
    string descriptor();
};

interface Amount {
    [Name=custom]
    constructor(u64 amount);
    [Name=max]
    constructor();
};

[Enum]
interface Proposal {
  Spending(string descriptor, string to_address, u64 amount, string description, string psbt);
  ProofOfReserve(string descriptor, string message, string psbt);
};

[Enum]
interface CompletedProposal {
  Spending(string txid, string description);
  ProofOfReserve(string descriptor, string message, string psbt);
};

interface Coinstr {
    [Throws=FFIError, Name=open]
    constructor(string base_path, string name, string password, Network network);
    [Throws=FFIError, Name=generate]
    constructor(string base_path, string name, string password, WordCount word_count, string? passphrase, Network network);
    [Throws=FFIError, Name=restore]
    constructor(string base_path, string name, string password, string mnemonic, string? passphrase, Network network);

    [Throws=FFIError]
    void save();
    boolean check_password(string password);
    [Throws=FFIError]
    void wipe(string password);
    [Throws=FFIError]
    void clear_cache();

    Network network();

    [Throws=FFIError]
    void add_relay(string url);
    sequence<Relay> relays();
    void connect();
    sequence<string> default_relays();
    [Throws=FFIError]
    void add_relays_and_connect(sequence<string> relays);
    [Throws=FFIError]
    void remove_relay(string url);
    [Throws=FFIError]
    void shutdown();
    void set_electrum_endpoint(string endpoint);
    [Throws=FFIError]
    string electrum_endpoint();
    u32 block_height();

    [Throws=FFIError]
    void add_contact(string public_key);
    [Throws=FFIError]
    void remove_contact(string public_key);

    [Throws=FFIError]
    Policy get_policy_by_id(string policy_id);  
    [Throws=FFIError]
    Proposal get_proposal_by_id(string proposal_id);  
    [Throws=FFIError]
    CompletedProposal get_completed_proposal_by_id(string completed_proposal_id);

    [Throws=FFIError]
    void delete_policy_by_id(string policy_id, duration? timeout);  
    [Throws=FFIError]
    void delete_proposal_by_id(string proposal_id);  
    [Throws=FFIError]
    void delete_completed_proposal_by_id(string completed_proposal_id);
    [Throws=FFIError]
    void delete_signer_by_id(string signer_id, duration? timeout); 

    [Throws=FFIError]
    record<DOMString, Policy> get_policies();
    [Throws=FFIError]
    record<DOMString, Proposal> get_proposals();
    [Throws=FFIError]
    record<DOMString, CompletedProposal> get_completed_proposals();

    [Throws=FFIError]
    string spend(string policy_id, string to_address, Amount amount, string description, u16 target_blocks);
    [Throws=FFIError]
    string self_transfer(string from_policy_id, string to_policy_id, Amount amount, u16 target_blocks);   
    [Throws=FFIError]
    string approve(string proposal_id);
    [Throws=FFIError]
    string approve_with_signed_psbt(string proposal_id, string signed_psbt);
    [Throws=FFIError]
    CompletedProposal finalize(string proposal_id);

    [Throws=FFIError]
    void rebroadcast_all_events();
    [Throws=FFIError]
    void republish_shared_key_for_policy(string policy_id);

    [Throws=FFIError]
    Balance? get_balance(string policy_id);
    [Throws=FFIError]
    Balance get_total_balance();
    [Throws=FFIError]
    string? get_last_unused_address(string policy_id);

    void sync();
};
