name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Toolchain
        run: |
          rustup install nightly-2024-01-11
          rustup component add rustfmt --toolchain nightly-2024-01-11
      - name: Format
        run: cargo +nightly-2024-01-11 fmt --all -- --config format_code_in_doc_comments=true --check

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-args:
          [
            "-p smartvaults-core",
            "-p smartvaults-core --features reserves",
            "-p smartvaults-protocol",
            "-p smartvaults-sdk",
            "-p smartvaults-cli",
            "-p smartvaults-desktop",
            "-p smartvaults-sdk-ffi",
          ]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml','**/Cargo.lock') }}
    - name: Install GUI dependencies
      if: ${{ matrix.build-args == '-p smartvaults-desktop' }}
      run: sudo apt update && sudo apt install build-essential libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev libdbus2.0-cil-dev libnotify-cil-dev libusb-1.0-0-dev libudev-dev python3-dev
    - name: Build
      run: cargo build ${{ matrix.build-args }}
    - name: Tests
      run: cargo test ${{ matrix.build-args }}
    - name: Clippy
      run: cargo clippy ${{ matrix.build-args }} -- -D warnings

  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-args:
          [
            "-p smartvaults-core",
            "-p smartvaults-protocol",
            "-p smartvaults-core-js",
          ]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-wasm32-${{ hashFiles('**/Cargo.toml','**/Cargo.lock') }}
    - name: Add WASM
      run: rustup target add wasm32-unknown-unknown
    - name: Set profile
      run: rustup set profile minimal && rustup component add clippy
    - name: Build
      run: cargo build ${{ matrix.build-args }} --target wasm32-unknown-unknown
    - name: Clippy
      run: cargo clippy ${{ matrix.build-args }} --target wasm32-unknown-unknown -- -D warnings